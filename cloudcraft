#!/usr/bin/env python
from ConfigParser import ConfigParser
from optparse import OptionParser

import json

import craft

def execute(options, args):
    conf = ConfigParser()
    conf.read(options.config)
    instance = None
    if len(args) == 0:
        return False

    try:
        instance = json.load(open(options.instance))
    except IOError:
        instance = {}

    if args[0] == "provision":
        if instance:
            print "%(instance_file)s already exists." % { "instance_file": options.instance }
            exit(-1)
        instance = craft.aws.provision(**dict(conf.items("amazon")))
        if not instance:
            print "Provisioning failed!"
        json.dump(instance, open(options.instance, "w"), indent=True)
        print "Provisioned minecraft server"
    elif args[0] == "destroy":
        if not instance:
            print "Couldn't load instance"
            exit(-1)
        token = conf.get("amazon", "AWS_ACCESS_TOKEN")
        secret = conf.get("amazon", "AWS_ACCESS_SECRET")
        region = conf.get("amazon", "EC2_REGION")
        stat = craft.aws.destroy(instance, aws_access_token=token,
                                 aws_access_secret=secret, ec2_region=region)
        if stat:
            print "Done. %s can now be removed" % (options.instance)
    return True


def get_arg_parser():
    usage = "usage: %prog [options] <script>"
    parser = OptionParser(usage=usage)
    parser.add_option("-c", "--config", dest="config", default="craft.conf",
                      help="cloudcraft config file", metavar="FILE")
    parser.add_option("-i", "--instance", dest="instance", default="instance.json",
                      help="Metadata for the minecraft server instance", metavar="FILE")
    return parser


if __name__ == '__main__':
    parser = get_arg_parser()
    (options, args) = parser.parse_args()

    if not execute(options, args):
        parser.print_usage()
